.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CHECK_OPENMANAGE.CONF 5"
.TH CHECK_OPENMANAGE.CONF 5 "2011-08-26" "check_openmanage 3.7.3" "Nagios plugin"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
\&\fIcheck_openmanage.conf\fR \- Configuration file for check_openmanage
.SH "FILE FORMAT"
.IX Header "FILE FORMAT"
The file has an ini-style syntax and consists of sections and
parameters. A section begins with the name of the section in square
brackets and continues until the next section begins. An example of
section with two keywords and parameters:
.Sp
.RS 8
\&\fI[section]\fR
    \fIkey1\fR = \fIboolean\fR
    \fIkey2\fR = \fIstring\fR
.RE
.PP
The data types used are string (no quotes needed) and bool (with
values of \f(CW\*(C`TRUE/FALSE\*(C'\fR). For boolean values, \f(CW1\fR, \f(CW\*(C`on\*(C'\fR and \f(CW\*(C`true\*(C'\fR
are equivalent, likewise for \f(CW0\fR, \f(CW\*(C`off\*(C'\fR and \f(CW\*(C`false\*(C'\fR. They are also
case insensitive.
.PP
The root section or global section has no section name in brackets,
example:
.PP
.Vb 2
\&        key1 = false
\&        key2 = foo
\&        
\&        [section]
\&            key1 = true
\&            key2 = bar
.Ve
.PP
The values set in a bracket section will override those set in the
root section, in case of conflicts.
.PP
Lines starting with \f(CW\*(C`#\*(C'\fR or \f(CW\*(C`;\*(C'\fR are considered comments and ignored, as
are blank lines.
.PP
The configuration file must be a regular file. Owner and group does
not matter, but the Nagios user must have read access.
.SH "SECTIONS AND ORDERING"
.IX Header "SECTIONS AND ORDERING"
The section name should correspond to the hostname, i.e. the value
passed to the \f(CW\*(C`\-H\*(C'\fR or \f(CW\*(C`\-\-hostname\*(C'\fR parameter. The section name
itself can be either an exact match to the hostname, or a glob
pattern, as this example shows:
.PP
.Vb 2
\&        key1 = true
\&        key2 = foo
\&    
\&        [192.168.1.2]
\&            key1 = true
\&    
\&        [192.168.*]
\&            key1 = false
\&            key2 = bar
.Ve
.PP
The sections are read in order of significance. The root section is
read first. Then any sections with glob patterns that match the
hostname are read (alphabetically). Any section whose name is an exact
match to the hostname is read last.
.PP
For boolean values, any conflicts are resolved by letting the section
with the most significance (closest match to the hostname) override
any previous definitions. For string values, they are simply added
together.
.PP
In the example above, for the host \f(CW192.168.1.2\fR the value of \fIkey1\fR
will be \fItrue\fR and \fIkey2\fR will be \fIbar\fR. Any other host that
matches \f(CW\*(C`192.168.*\*(C'\fR will have \fIkey1 = false\fR and \fIkey2 = bar\fR. All
other hosts will have \fIkey1 = true\fR and \fIkey2 = foo\fR.
.PP
Normal shell globbing may be used for the section names. This is
limited to \f(CW\*(C`*\*(C'\fR, \f(CW\*(C`?\*(C'\fR and \f(CW\*(C`[]\*(C'\fR. Some examples:
.PP
.Vb 2
\&        [192.168.*]
\&            # matches e.g. 192.168.10.20
\&
\&        [192.168.10[34].1]
\&            # matches 192.168.103.1 and 192.168.104.1
\&
\&        [login?.example.com]
\&            # mathces e.g. login1.example.com
.Ve
.PP
\&\s-1CAUTION\s0! Be careful not to have more than one glob pattern section
match any single host. This may lead to unpredictable results.
.SH "COMMAND LINE OPTIONS"
.IX Header "COMMAND LINE OPTIONS"
Unless otherwise  noted, options given in the configuration file will
override any corresponding command line options.
.PP
In general, avoid using the same options on command line and in the
configuration file.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.SS "\s-1GENERAL\s0"
.IX Subsection "GENERAL"
.IP "Check control" 4
.IX Item "Check control"
Any keyword to the \f(CW\*(C`\-\-check\*(C'\fR parameter are accepted in the
configuration file, as \f(CW\*(C`check_\f(CIKEYWORD\f(CW\*(C'\fR. These options take boolean
values (\f(CW\*(C`true\*(C'\fR or \f(CW\*(C`false\*(C'\fR). The following keywords are accepted for
check control, listed here with their default values:
.Sp
.Vb 10
\&        check_storage = true
\&        check_memory = true
\&        check_fans = true
\&        check_power = true
\&        check_temp = true
\&        check_cpu = true
\&        check_voltage = true
\&        check_batteries = true
\&        check_amperage = true
\&        check_intrusion = true
\&        check_sdcard = true
\&        check_esmhealth = true
\&        check_esmlog = false
\&        check_alertlog = false
\&        check_everything = false
.Ve
.Sp
If used together with the \f(CW\*(C`\-\-check\*(C'\fR command line option, the command
line option will override the configuration file, if there is a
conflict.
.Sp
The option \f(CW\*(C`check_everything\*(C'\fR is special and turns on all
checks. Setting this option to \*(L"true\*(R" will effectively negate any
other check options. This option corresponds to the \f(CW\*(C`\-a\*(C'\fR or \f(CW\*(C`\-\-all\*(C'\fR
command line option.
.Sp
For more information about check control, see
\&\*(L"\s-1CHECK\s0 \s-1CONTROL\s0\*(R" in \fIcheck_openmanage\fR\|(8).
.IP "Blacklisting" 4
.IX Item "Blacklisting"
For blacklisting the keyword \f(CW\*(C`blacklist\*(C'\fR is used, and the value is a
string that uses the same syntax as the \f(CW\*(C`\-b\*(C'\fR or \f(CW\*(C`\-\-blacklist\*(C'\fR
parameter. Example:
.Sp
.Vb 1
\&    blacklist = ctrl_fw=all/pdisk=0:0:1
.Ve
.Sp
If used together with the \f(CW\*(C`\-b\*(C'\fR or \f(CW\*(C`\-\-blacklist\*(C'\fR command line option,
the two blacklists from the config file and command line are merged
together.
.Sp
For more information about blacklisting, including syntax, see
\&\*(L"\s-1BLACKLISTING\s0\*(R" in \fIcheck_openmanage\fR\|(8).
.IP "Timeout" 4
.IX Item "Timeout"
The plugin timeout can be configured with the \f(CW\*(C`timeout\*(C'\fR keyword. The
argument is number of seconds and should be a positive
integer. Example:
.Sp
.Vb 1
\&    timeout = 60
.Ve
.Sp
The corresponding command line option is \f(CW\*(C`\-t\*(C'\fR or \f(CW\*(C`\-\-timeout\*(C'\fR.
.IP "Performance data" 4
.IX Item "Performance data"
Performance data can be turned on in the configuration file with
\&\f(CW\*(C`performance_data\*(C'\fR. Accepted values are boolean (\s-1TRUE/FALSE\s0) or
either of the keywords \*(L"minimal\*(R" and \*(L"multiline\*(R". Example:
.Sp
.Vb 1
\&    performance_data = true
.Ve
.Sp
The corresponding command line option is \f(CW\*(C`\-p\*(C'\fR or \f(CW\*(C`\-\-perfdata\*(C'\fR.
.IP "Legacy Performance data" 4
.IX Item "Legacy Performance data"
With version 3.7.0, performance data output changed. The new format is
not compatible with the old format. Users who wish to postpone
switching to the new performance data \s-1API\s0 may use this option. This
option takes a boolean value. Example:
.Sp
.Vb 1
\&    legacy_performance_data = true
.Ve
.Sp
The corresponding command line option is \f(CW\*(C`\-\-legacy\-perfdata\*(C'\fR.
.IP "Temperature unit" 4
.IX Item "Temperature unit"
The temperature unit used for reporting, performance data etc. can be
set with the \f(CW\*(C`temperature_unit\*(C'\fR option. Allowed values are \f(CW\*(C`F\*(C'\fR for
Fahrenheit, \f(CW\*(C`C\*(C'\fR for Celsius, \f(CW\*(C`K\*(C'\fR for Kelvin and \f(CW\*(C`R\*(C'\fR for
Rankine. Example:
.Sp
.Vb 1
\&    temperature_unit = F
.Ve
.Sp
The corresponding command line option is \f(CW\*(C`\-\-tempunit\*(C'\fR. Note that the
command line option \f(CW\*(C`\-F\*(C'\fR or \f(CW\*(C`\-\-fahrenheit\*(C'\fR will override both the
command line option and the configuration file option.
.IP "Temperature limits" 4
.IX Item "Temperature limits"
Custom temperature limits may be configured with the options
\&\f(CW\*(C`temp_threshold_warning\*(C'\fR and \f(CW\*(C`temp_threshold_critical\*(C'\fR. These
options corresponds to the command line options \f(CW\*(C`\-w\*(C'\fR or \f(CW\*(C`\-\-warning\*(C'\fR
and \f(CW\*(C`\-c\*(C'\fR or \f(CW\*(C`\-\-critical\*(C'\fR, respectively. They take the same arguments
as the command line options. Examples:
.Sp
.Vb 2
\&    temp_threshold_warning = 0=30/10
\&    temp_threshold_critical = 0=35/8
.Ve
.SS "\s-1SNMP\s0 \s-1OPTIONS\s0"
.IX Subsection "SNMP OPTIONS"
Several \s-1SNMP\s0 related options may be set in the configuration file. The
configuration file may contain the following \s-1SNMP\s0 options:
.IP "\s-1SNMP\s0 community string" 4
.IX Item "SNMP community string"
The \s-1SNMP\s0 community string can be set with \f(CW\*(C`snmp_community\*(C'\fR. Example:
.Sp
.Vb 1
\&    snmp_community = mycommunity
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-C\*(C'\fR or \f(CW\*(C`\-\-community\*(C'\fR
.IP "\s-1SNMP\s0 protocol version" 4
.IX Item "SNMP protocol version"
The \s-1SNMP\s0 protocol version can be set with \f(CW\*(C`snmp_version\*(C'\fR. Example:
.Sp
.Vb 1
\&    snmp_version = 2
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-P\*(C'\fR or \f(CW\*(C`\-\-protocol\*(C'\fR
.IP "\s-1SNMP\s0 port number" 4
.IX Item "SNMP port number"
The remote port number used with \s-1SNMP\s0 can be set with
\&\f(CW\*(C`snmp_port\*(C'\fR. Example:
.Sp
.Vb 1
\&    snmp_port = 161
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-\-port\*(C'\fR
.IP "Use IPv6 instead of IPv4" 4
.IX Item "Use IPv6 instead of IPv4"
The option \f(CW\*(C`snmp_use_ipv6\*(C'\fR instructs the plugin to use IPv6 instead
of IPv4. This option takes a boolean value. Example:
.Sp
.Vb 1
\&    snmp_use_ipv6 = true
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-6\*(C'\fR or \f(CW\*(C`\-\-ipv6\*(C'\fR
.IP "Use \s-1TCP\s0 instead of \s-1UDP\s0" 4
.IX Item "Use TCP instead of UDP"
The option \f(CW\*(C`snmp_use_ipv6\*(C'\fR instructs the plugin to use IPv6 instead
of IPv4. This option takes a boolean value. Example:
.Sp
.Vb 1
\&    snmp_use_tcp = true
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-\-tcp\*(C'\fR
.SS "\s-1OUTPUT\s0 \s-1CONTROL\s0"
.IX Subsection "OUTPUT CONTROL"
These options gives some control over the output given by the plugin.
.IP "Include servicetag in alerts" 4
.IX Item "Include servicetag in alerts"
The option \f(CW\*(C`output_servicetag\*(C'\fR will make the plugin include the
servers servicetag (serial number) in every alert. This option takes a
boolean value. Example:
.Sp
.Vb 1
\&    output_servicetag = true
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-i\*(C'\fR or \f(CW\*(C`\-\-info\*(C'\fR
.IP "Include service state in alerts" 4
.IX Item "Include service state in alerts"
The option \f(CW\*(C`output_servicestate\*(C'\fR will make the plugin include the
service state in any alerts. This option takes a boolean
value. Example:
.Sp
.Vb 1
\&    output_servicestate = true
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-s\*(C'\fR or \f(CW\*(C`\-\-state\*(C'\fR
.IP "Include abbreviated service state in alerts" 4
.IX Item "Include abbreviated service state in alerts"
The option \f(CW\*(C`output_servicestate_abbr\*(C'\fR will make the plugin include
the abbreviated service state in any alerts. This option takes a
boolean value. Example:
.Sp
.Vb 1
\&    output_servicestate_abbr = true
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-S\*(C'\fR or \f(CW\*(C`\-\-short\-state\*(C'\fR
.IP "Show system info with alerts" 4
.IX Item "Show system info with alerts"
The option \f(CW\*(C`output_sysinfo\*(C'\fR will make the plugin output some system
information with alerts. This option takes a boolean value. Example:
.Sp
.Vb 1
\&    output_sysinfo = true
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-e\*(C'\fR or \f(CW\*(C`\-\-extinfo\*(C'\fR
.IP "Show blacklistings in \s-1OK\s0 output" 4
.IX Item "Show blacklistings in OK output"
The option \f(CW\*(C`output_blacklist\*(C'\fR will make the plugin show any
blacklistings in the \s-1OK\s0 output. This option takes a boolean
value. Example:
.Sp
.Vb 1
\&    output_blacklist = true
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-B\*(C'\fR or \f(CW\*(C`\-\-show\-blacklist\*(C'\fR
.IP "Verbosity of \s-1OK\s0 output" 4
.IX Item "Verbosity of OK output"
The option \f(CW\*(C`output_ok_verbosity\*(C'\fR lets you adjust how much information
is shown in the \s-1OK\s0 output. This option takes a positive integer as
parameter. Example:
.Sp
.Vb 1
\&    output_ok_verbosity = 3
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-o\*(C'\fR or \f(CW\*(C`\-\-ok\-info\*(C'\fR
.IP "\s-1HTML\s0 output" 4
.IX Item "HTML output"
The output \f(CW\*(C`output_html\*(C'\fR makes the plugin produce \s-1HTML\s0 output. This
option takes either a boolean value, or a country or area
code. Example:
.Sp
.Vb 1
\&    output_html = de
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-I\*(C'\fR or \f(CW\*(C`\-\-htmlinfo\*(C'\fR
.IP "Custom line after alerts" 4
.IX Item "Custom line after alerts"
The option \f(CW\*(C`output_post_message\*(C'\fR lets you specify one line of
information to be shown after any alerts. This option takes a string
as parameter. Examples:
.Sp
.Vb 2
\&    output_post_message = OS: %o %r
\&    output_post_message = NOTE: Handled in ticket 123456
.Ve
.Sp
For more information about codes and formatting, see the corresponding
command line option \f(CW\*(C`\-\-postmsg\*(C'\fR in \fIcheck_openmanage\fR\|(8).
.IP "Suppress or censor the servicetag" 4
.IX Item "Suppress or censor the servicetag"
The option \f(CW\*(C`output_hide_servicetag\*(C'\fR will censor the servicetag
(serial number) in any output from the plugin. This option takes a
boolean value. Example:
.Sp
.Vb 1
\&    output_hide_servicetag = true
.Ve
.Sp
Corresponding command line option: \f(CW\*(C`\-\-hide\-servicetag\*(C'\fR
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIcheck_openmanage\fR\|(8)
<http://folk.uio.no/trondham/software/check_openmanage.html>
